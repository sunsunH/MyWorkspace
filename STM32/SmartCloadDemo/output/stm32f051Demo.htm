<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\output\stm32f051Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\output\stm32f051Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Mar 02 15:26:26 2018
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; gizwitsHandle &rArr; gizProtocolGetDeviceInfo &rArr; gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[57]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[b7]">rbWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">rbWrite</a><BR>
 <LI><a href="#[ab]">rbRead</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ab]">rbRead</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[27]">CEC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[24]">SPI2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f051.o(.text)
 <LI><a href="#[1d]">TIM14_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1e]">TIM15_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1f]">TIM16_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[20]">TIM17_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1c]">TIM6_DAC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[13]">TS_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[25]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[26]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[2d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f051.o(.text)
 <LI><a href="#[2b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2a]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[2c]">fputc</a> from uart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[32]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[33]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[35]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[da]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[db]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; gizwitsHandle &rArr; gizProtocolGetDeviceInfo &rArr; gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f051.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e9]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAckCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolResendData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolModuleStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolModuleInfoHandle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedDataAck
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolHeadInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolErrorCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolCommonAck
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolAckHandle
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoint2Event
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizCheckReport
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsEventProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizPutData
</UL>

<P><STRONG><a name="[44]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[54]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[34]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[36]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ea]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[72]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizStandardDecompressionValue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolModuleInfoHandle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedDataAck
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolCommonAck
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
</UL>

<P><STRONG><a name="[eb]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[4f]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAckCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolHeadInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolAckHandle
</UL>

<P><STRONG><a name="[ec]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolAckHandle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizCheckReport
</UL>

<P><STRONG><a name="[ef]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userHandle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCreate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolResendData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
</UL>

<P><STRONG><a name="[f0]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizY2X
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[45]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[48]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[55]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5a]"></a>DHT11_Check</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT11_Check &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[5d]"></a>DHT11_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_Init &rArr; DHT11_Rst &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>DHT11_Read_Bit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT11_Read_Bit &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
</UL>

<P><STRONG><a name="[62]"></a>DHT11_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_Read_Byte &rArr; DHT11_Read_Bit &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[63]"></a>DHT11_Read_Data</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dht11.o(i.DHT11_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DHT11_Read_Data &rArr; DHT11_Read_Byte &rArr; DHT11_Read_Bit &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>DHT11_Rst</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT11_Rst &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[65]"></a>Delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, systick.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[5b]"></a>Delay_us</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, time.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[69]"></a>EXIT_KEY_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, key.o(i.EXIT_KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXIT_KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = EXTI4_15_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>EXTI_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedGpio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_GPIO_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnOffLed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[66]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnOffLed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedGpio
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[70]"></a>Gui_DrawFont_GBK16</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, lcd.o(i.Gui_DrawFont_GBK16))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetRegion &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>Gui_DrawPoint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(i.Gui_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Gui_DrawPoint &rArr; Lcd_SetRegion &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LCD_WriteData_16Bit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(i.LCD_WriteData_16Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WriteData_16Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>

<P><STRONG><a name="[76]"></a>Lcd_Clear</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd.o(i.Lcd_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Lcd_Clear &rArr; Lcd_SetRegion &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Lcd_GPIO_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd.o(i.Lcd_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Lcd_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Lcd_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(i.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lcd_Init &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Lcd_SetRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lcd.o(i.Lcd_SetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Lcd_SetRegion &rArr; Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>

<P><STRONG><a name="[7a]"></a>Lcd_WriteData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(i.Lcd_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
</UL>

<P><STRONG><a name="[77]"></a>Lcd_WriteIndex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(i.Lcd_WriteIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_WriteIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_INT_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedGpio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_GPIO_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[82]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_INT_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[6a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
</UL>

<P><STRONG><a name="[7b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[75]"></a>SPI_WriteData</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lcd.o(i.SPI_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_16Bit
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>Systick_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, systick.o(i.Systick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Systick_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>TIM2_Config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, time.o(i.TIM2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>TIM3_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, time.o(i.TIM3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>TIM3_INT_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, time.o(i.TIM3_INT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_INT_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizTimerMs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[88]"></a>TIM_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[84]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[67]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[83]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[7d]"></a>TimingDelay_Decrement</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c5]"></a>UART2_send_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.UART2_send_byte))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[8b]"></a>UART_Recive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(i.UART_Recive))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Recive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>USART2_Configuration</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uart.o(i.USART2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART2_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>USART2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; gizPutData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizPutData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
</UL>

<P><STRONG><a name="[92]"></a>USART_Configuration</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, uart.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>USART_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8f]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>USART_Init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
</UL>

<P><STRONG><a name="[93]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ba]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gizwits_product.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsEventProcess
</UL>

<P><STRONG><a name="[4b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a3]"></a>exchangeBytes</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, common.o(i.exchangeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exchangeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolModuleStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolErrorCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolCommonAck
</UL>

<P><STRONG><a name="[b2]"></a>exchangeWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, common.o(i.exchangeWord))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
</UL>

<P><STRONG><a name="[2c]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>gizAcrossByteJudge</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, datapointtools.o(i.gizAcrossByteJudge))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizStandardDecompressionValue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizStandardCompressValue
</UL>

<P><STRONG><a name="[9c]"></a>gizByteOrderExchange</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, datapointtools.o(i.gizByteOrderExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gizByteOrderExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizStandardDecompressionValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
</UL>

<P><STRONG><a name="[97]"></a>gizGetTimerCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gizwits_product.o(i.gizGetTimerCount))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolResendData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolReboot
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolAckHandle
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizCheckReport
</UL>

<P><STRONG><a name="[a4]"></a>gizProtocolSum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, common.o(i.gizProtocolSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gizProtocolSum
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedDataAck
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolErrorCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolCommonAck
</UL>

<P><STRONG><a name="[91]"></a>gizPutData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizPutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = gizPutData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>gizStandardCompressValue</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, datapointtools.o(i.gizStandardCompressValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gizStandardCompressValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizAcrossByteJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
</UL>

<P><STRONG><a name="[99]"></a>gizStandardDecompressionValue</STRONG> (Thumb, 180 bytes, Stack size 104 bytes, datapointtools.o(i.gizStandardDecompressionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gizStandardDecompressionValue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizAcrossByteJudge
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizByteOrderExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoint2Event
</UL>

<P><STRONG><a name="[8a]"></a>gizTimerMs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gizwits_product.o(i.gizTimerMs))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>gizY2X</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, datapointtools.o(i.gizY2X))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gizY2X
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
</UL>

<P><STRONG><a name="[b9]"></a>gizwitsEventProcess</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gizwits_product.o(i.gizwitsEventProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = gizwitsEventProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnOffLed
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[bc]"></a>gizwitsHandle</STRONG> (Thumb, 558 bytes, Stack size 88 bytes, gizwits_protocol.o(i.gizwitsHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = gizwitsHandle &rArr; gizProtocolGetDeviceInfo &rArr; gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAckCheck
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolReboot
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolNTP
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolModuleStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolModuleInfoHandle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedDataAck
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolErrorCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolCommonAck
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolAckHandle
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsEventProcess
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>gizwitsInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gizwits_protocol.o(i.gizwitsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = gizwitsInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>gizwitsSetMode</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, gizwits_protocol.o(i.gizwitsSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gizwitsSetMode &rArr; gizProtocolWaitAck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolHeadInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>initLedGpio</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, led.o(i.initLedGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initLedGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main &rArr; gizwitsHandle &rArr; gizProtocolGetDeviceInfo &rArr; gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userHandle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnOnOffLed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLedGpio
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_INT_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_KEY_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b4]"></a>mcuRestart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gizwits_product.o(i.mcuRestart))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolReboot
</UL>

<P><STRONG><a name="[aa]"></a>rbCanRead</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ringbuffer.o(i.rbCanRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rbCanRead &rArr; rbCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
</UL>

<P><STRONG><a name="[c4]"></a>rbCanWrite</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ringbuffer.o(i.rbCanWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rbCanWrite &rArr; rbCanRead &rArr; rbCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
</UL>

<P><STRONG><a name="[c3]"></a>rbCapacity</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i.rbCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rbCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
</UL>

<P><STRONG><a name="[be]"></a>rbCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ringbuffer.o(i.rbCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rbCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsInit
</UL>

<P><STRONG><a name="[ab]"></a>rbRead</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, ringbuffer.o(i.rbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = rbRead &rArr;  rbRead (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetOnePacket
</UL>

<P><STRONG><a name="[b7]"></a>rbWrite</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, ringbuffer.o(i.rbWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanWrite
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizPutData
</UL>

<P><STRONG><a name="[bb]"></a>turnOnOffLed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led.o(i.turnOnOffLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turnOnOffLed
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsEventProcess
</UL>

<P><STRONG><a name="[a5]"></a>uartWrite</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gizwits_product.o(i.uartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolResendData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedDataAck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolErrorCmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolCommonAck
</UL>

<P><STRONG><a name="[c2]"></a>userHandle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gizwits_product.o(i.userHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = userHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>userInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gizwits_product.o(i.userInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = userInit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7e]"></a>SetSysClock</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[80]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
</UL>

<P><STRONG><a name="[95]"></a>gizCheckReport</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gizwits_protocol.o(i.gizCheckReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gizCheckReport &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizGetTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
</UL>

<P><STRONG><a name="[98]"></a>gizDataPoint2Event</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gizwits_protocol.o(i.gizDataPoint2Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gizDataPoint2Event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizStandardDecompressionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
</UL>

<P><STRONG><a name="[9a]"></a>gizDataPoints2ReportData</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gizwits_protocol.o(i.gizDataPoints2ReportData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gizDataPoints2ReportData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizY2X
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizStandardCompressValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizByteOrderExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolIssuedProcess
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
</UL>

<P><STRONG><a name="[9e]"></a>gizDevReportPolicy</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizDevReportPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = gizDevReportPolicy &rArr; gizReportData &rArr; gizProtocolWaitAck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizCheckReport
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizGetTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a0]"></a>gizProtocolAckHandle</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizProtocolAckHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gizProtocolAckHandle &rArr; gizProtocolResendData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolResendData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizGetTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a2]"></a>gizProtocolCommonAck</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gizwits_protocol.o(i.gizProtocolCommonAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gizProtocolCommonAck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a6]"></a>gizProtocolErrorCmd</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gizwits_protocol.o(i.gizProtocolErrorCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = gizProtocolErrorCmd &rArr; gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolHeadInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a8]"></a>gizProtocolGetDeviceInfo</STRONG> (Thumb, 190 bytes, Stack size 128 bytes, gizwits_protocol.o(i.gizProtocolGetDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = gizProtocolGetDeviceInfo &rArr; gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolHeadInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a9]"></a>gizProtocolGetOnePacket</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, gizwits_protocol.o(i.gizProtocolGetOnePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = gizProtocolGetOnePacket &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a7]"></a>gizProtocolHeadInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gizwits_protocol.o(i.gizProtocolHeadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = gizProtocolHeadInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolGetDeviceInfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolErrorCmd
</UL>

<P><STRONG><a name="[ac]"></a>gizProtocolIssuedDataAck</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, gizwits_protocol.o(i.gizProtocolIssuedDataAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gizProtocolIssuedDataAck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[ad]"></a>gizProtocolIssuedProcess</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, gizwits_protocol.o(i.gizProtocolIssuedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gizProtocolIssuedProcess &rArr; gizDataPoints2ReportData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoints2ReportData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDataPoint2Event
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[af]"></a>gizProtocolModuleInfoHandle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizProtocolModuleInfoHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = gizProtocolModuleInfoHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[b0]"></a>gizProtocolModuleStatus</STRONG> (Thumb, 834 bytes, Stack size 8 bytes, gizwits_protocol.o(i.gizProtocolModuleStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = gizProtocolModuleStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[b1]"></a>gizProtocolNTP</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gizwits_protocol.o(i.gizProtocolNTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gizProtocolNTP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeWord
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[b3]"></a>gizProtocolReboot</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gizwits_protocol.o(i.gizProtocolReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gizProtocolReboot
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcuRestart
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizGetTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[a1]"></a>gizProtocolResendData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizProtocolResendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = gizProtocolResendData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizGetTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolAckHandle
</UL>

<P><STRONG><a name="[b5]"></a>gizProtocolWaitAck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizProtocolWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = gizProtocolWaitAck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizGetTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsSetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizReportData
</UL>

<P><STRONG><a name="[b6]"></a>gizProtocolWaitAckCheck</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gizwits_protocol.o(i.gizProtocolWaitAckCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = gizProtocolWaitAckCheck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizwitsHandle
</UL>

<P><STRONG><a name="[9f]"></a>gizReportData</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, gizwits_protocol.o(i.gizReportData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = gizReportData &rArr; gizProtocolWaitAck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolSum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeBytes
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolWaitAck
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizProtocolHeadInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gizDevReportPolicy
</UL>

<P><STRONG><a name="[2b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[47]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
